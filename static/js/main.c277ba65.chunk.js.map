{"version":3,"sources":["components/SearchBox.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","CardList","robots","Error","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","id","name","username","email","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKC,UAAU,OACd,2BACCA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCgBCK,EAtBE,SAAC,GAAe,EAAbC,OAElB,MAAM,IAAIC,MAAM,gBCKHC,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DJ,EAAMK,WCkBJC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,wDAGJG,KAAKX,MAAMK,a,GAjBCQ,aCFdhB,EAAS,CACrB,CACCiB,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAER,CACCH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAER,CACCH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAER,CACCH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAER,CACCH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAER,CACCH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAER,CACCH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAER,CACCH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAER,CACCH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAER,CACCH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BCAMC,G,wDAlDd,aAAe,IAAD,8BACb,gBAcDC,eAAiB,SAACC,GACjB,EAAKR,SAAS,CACbtB,YAAa8B,EAAMC,OAAOC,SAf3B,EAAKf,MAAQ,CACZV,OAAQ,GACRP,YAAa,IAJD,E,gEAQO,IAAD,OACnBiC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKf,SAAS,CAACf,OAAQ8B,OACvChB,KAAKC,SAAS,CAACf,OAAQA,M,+BASd,IAAD,EACwBc,KAAKJ,MAA7BV,EADA,EACAA,OAAQP,EADR,EACQA,YAEVsC,EAAiB/B,EAAOgC,QAAO,SAAAC,GACpC,OAAOA,EAAMf,KAAKgB,cAAcC,SAAS1C,EAAYyC,kBAGtD,OAAQlC,EAAOoC,OASb,yBAAKzC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcoB,KAAKQ,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtB,OAAQ+B,OAZrB,yBAAKpC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcoB,KAAKQ,iBAC9B,wBAAI3B,UAAU,MAAd,gB,GAlCa0C,IAAMrB,YCIJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,a","file":"static/js/main.c277ba65.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) => { \r\n\tif (true) {\r\n\t\tthrow new Error('NOOOOOOOOO!');\r\n\t}\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\tid={user.id}\r\n\t\t\t\t\t\t\tname={user.name}\r\n\t\t\t\t\t\t\temail={user.email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","export const robots = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: 'Leanne Graham',\r\n\t\tusername: 'Bret',\r\n\t\temail: 'Sincere@april.biz'\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tname: 'Ervin Howell',\r\n\t\tusername: 'Antonette',\r\n\t\temail: 'Shanna@melissa.tv'\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tname: 'Clementine Bauch',\r\n\t\tusername: 'Samantha',\r\n\t\temail: 'Nathan@yesenia.net'\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tname: 'Patricia Lebsack',\r\n\t\tusername: 'Karianne',\r\n\t\temail: 'Julianne.OConner@kory.org'\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\tname: 'Chelsey Dietrich',\r\n\t\tusername: 'Kamren',\r\n\t\temail: 'Lucio_Hettinger@annie.ca'\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\tname: 'Mrs. Dennis Schulist',\r\n\t\tusername: 'Leopoldo_Corkery',\r\n\t\temail: 'Karley_Dach@jasper.info'\r\n\t},\r\n\t{\r\n\t\tid: 7,\r\n\t\tname: 'Kurtis Weissnat',\r\n\t\tusername: 'Elwyn.Skiles',\r\n\t\temail: 'Telly.Hoeger@billy.biz'\r\n\t},\r\n\t{\r\n\t\tid: 8,\r\n\t\tname: 'Nicholas Runolfsdottir V',\r\n\t\tusername: 'Maxime_Nienow',\r\n\t\temail: 'Sherwood@rosamond.me'\r\n\t},\r\n\t{\r\n\t\tid: 9,\r\n\t\tname: 'Glenna Reichert',\r\n\t\tusername: 'Delphine',\r\n\t\temail: 'Chaim_McDermott@dana.io'\r\n\t},\r\n\t{\r\n\t\tid: 10,\r\n\t\tname: 'Clementina DuBuque',\r\n\t\tusername: 'Moriah.Stanton',\r\n\t\temail: 'Rey.Padberg@karina.biz'\r\n\t}\r\n];\r\n  ","import React from 'react';\r\nimport SearchBox from '../components/SearchBox'\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {robots} from '../robots';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({robots: users}));\r\n\t\tthis.setState({robots: robots});\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tsearchfield: event.target.value\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\treturn !robots.length ?\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\t\r\n\t\t\t\t\t<h1 className='f1'>Loading</h1>\r\n\t\t\t\t</div>\r\n\t\t\t) :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}